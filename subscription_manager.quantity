MODULE NAME
    subscription_manager.quantity


CLASSES
    
    class QuantityDefaultValueCalculator(object)
     |  A class that calculates the default quantity value for a 
     |  subscription.
     |  
     |  
     |  __init__(self, facts, current_entitlements)
     |      x.__init__(...) initializes x; see x.__class__.__doc__ for 
     |      signature
     |  
     |  calculate(self, pool)
     |  
     |  _is_virtual_machine(self)
     |  
     |  _get_total_consumed(self, product_id)
     |      Determines how many entitlements are currently consumed based 
     |      on the specified product id. The product id is checked against 
     |      the Order SKU in the certificate.
     |  
     |  _get_allowed_quantity_for_virtual_machine(self, product_attrs)
     |  
     |  _get_allowed_quantity_for_physical_machine(self, product_attrs)
     |  
     |  _get_float_from_dict(self, target_dict, name)
     |      Pulls a value from a dictionary and converts it to a float. If 
     |      the dictionary does not define the specified property, returns 
     |      1.0
     |  
     |  _flatten_attributes(self, pool_json, attribute_list_name)
     |      Flatten the attributes in a pool's JSON data by attribute list 
     |      name.
     |  
     |  Class variables
     |      
     |      _SOCKET_FACT_NAME = 'cpu.cpu_socket(s)'
     |      
     |      _SOCKETS_PROD_ATTR_NAME = 'sockets'
     |      
     |      _CPUS_FACT_NAME = 'cpu.cpu(s)'
     |      
     |      _CPUS_PROD_ATTR_NAME = 'vcpu'
     |      
     |      _VIRT_IS_GUEST_FACT_NAME = 'virt.is_guest'
     |  
     |  Inherited methods
     |      object.__delattr__(...)
     |      object.__format__(...)
     |      object.__getattribute__(...)
     |      object.__hash__(x)
     |      object.__new__(T, S, *...)
     |      object.__reduce__(...)
     |      object.__reduce_ex__(...)
     |      object.__repr__(x)
     |      object.__setattr__(...)
     |      object.__sizeof__()
     |      object.__str__(x)
     |      object.__subclasshook__(...)

FUNCTIONS
    
    valid_quantity(quantity)
    
    allows_multi_entitlement(pool)
        Determine if this pool allows multi-entitlement based on the pool's
        top-level product's multi-entitlement attribute.

VARIABLES
    
    __package__ = 'subscription_manager'
