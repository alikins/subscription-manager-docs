MODULE NAME
    subscription_manager.gui.subscription_assistant


CLASSES
    
    class MappedListTreeView(gtk.TreeView)
     |  
     |  
     |  add_toggle_column(self, name, column_number, callback)
     |  
     |  add_column(self, name, column_number, expand=False, xalign=None)
     |  
     |  add_date_column(self, name, column_number, expand=False)
     |  
     |  add_editable_column(self, name, column_number, renderer, 
     |                      edit_callback)
    
    class SubscriptionAssistant(subscription_manager.gui.widgets.GladeWidget)
     |  Subscription Assistant GUI window.
     |  
     |  
     |  __init__(self, backend, consumer, facts, ent_dir=None, 
     |           prod_dir=None)
     |  
     |  show(self)
     |      Called by the main window when this page is to be displayed.
     |  
     |  set_parent_window(self, window)
     |  
     |  _reload_callback(self, product_ids, error)
     |  
     |  _reload_screen(self)
     |      Draws the entire screen, called when window is shown, or 
     |      something changes and we need to refresh.
     |  
     |  _reselect_products(self, product_ids)
     |      Reselect previously selected invalid products. Used after a 
     |      screen reload.
     |  
     |  _label_allocate(self, label, allocation)
     |  
     |  _check_for_date_change(self, widget)
     |      Called when the invalid date selection *may* have changed. 
     |      Several signals must be sent out to cover all situations and 
     |      thus multiple may trigger at once. As such we need to store the
     |      invalid date last calculated, and compare it to see if anything
     |      has changed before we trigger an expensive refresh.
     |  
     |  _get_invalid_date(self)
     |      Returns a datetime object for the invalid date to use based on 
     |      current state of the GUI controls.
     |  
     |  _load_last_valid_date(self)
     |      Return a datetime object representing the day, month, and year 
     |      of last validity. Ignore the timestamp returned from certlib.
     |  
     |  _display_invalid(self)
     |      Displays the list of products or entitlements that will invalid
     |      on the selected date.
     |  
     |  _display_subscriptions(self)
     |      Displays the list of subscriptions that will replace the 
     |      selected products/entitlements that will be invalid.
     |      
     |      To do this, will will build a master list of all product IDs 
     |      selected, both the top level marketing products and provided 
     |      products. We then look for any subscription valid for the given
     |      date, which provides *any* of those product IDs. Note that 
     |      there may be duplicate subscriptions shown. The user can select
     |      one subscription at a time to request an entitlement for, after
     |      which we will refresh the screen based on this new state.
     |  
     |  _get_parent_entry(self, name, bg_color)
     |  
     |  _get_selected_product_ids(self)
     |      Builds a master list of all product IDs for the selected 
     |      invalid products/entitlements. In the case of entitlements 
     |      which will be expired, we assume you want to keep all provided 
     |      products you have now, so these provided product IDs will be 
     |      included in the list.
     |  
     |  _on_invalid_active_toggled(self, cell, path)
     |      Triggered whenever the user checks one of the 
     |      products/entitlements in the invalid section of the UI.
     |  
     |  _on_invalid_checkbutton_toggled(self, button)
     |      Triggered when the user presses the check all toggle button, to
     |      select or unselect all invalid products
     |  
     |  format_date(self, date)
     |  
     |  hide(self, widget, event, data=None)
     |  
     |  _on_subscription_selection(self, widget)
     |      Handles the selection change in the subscription table.
     |  
     |  _update_sub_details(self, model, selected_tree_iter)
     |      Shows details for the current selected pool.
     |  
     |  subscribe_button_clicked(self, button)

VARIABLES
    
    _ = gettext.gettext
    
    log = logging.getLogger('rhsm-app.'+ __name__)
