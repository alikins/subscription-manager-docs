MODULE NAME
    subscription_manager.gui.allsubs


CLASSES
    
    class AllSubscriptionsTab(subscription_manager.gui.widgets.SubscriptionManagerTab)
     |  
     |  
     |  __init__(self, backend, consumer, facts, parent_win)
     |  
     |  get_store(self)
     |  
     |  _setup_title_text_renderer(self, column, markup, text_model_idx)
     |  
     |  get_type_map(self)
     |  
     |  filter_incompatible(self)
     |      Return True if we're not to include pools which failed a rule 
     |      check.
     |  
     |  filter_overlapping(self)
     |      Return True if we're not to include pools which provide 
     |      products for which we already have subscriptions.
     |  
     |  filter_uninstalled(self)
     |      Return True if we're not to include pools for products that are
     |      not installed.
     |  
     |  get_filter_text(self)
     |      Returns the text to filter subscriptions based on. Will return 
     |      None if the text box is empty.
     |  
     |  clear_pools(self)
     |      Clear pools list.
     |  
     |  display_pools(self)
     |      Re-display the list of pools last queried, based on current 
     |      filter options.
     |  
     |  _product_attrs_to_dict(self, productAttributesList)
     |      Convert the JSON list of product attributes into a dict we can 
     |      work with more easily.
     |  
     |  _machine_type(self, pools)
     |  
     |  _create_parent_map(self, title, bg_color)
     |  
     |  get_label(self)
     |  
     |  search_button_clicked(self, widget)
     |      Reload the subscriptions from the server when the Search button
     |      is clicked.
     |  
     |  _update_display(self, data, error)
     |  
     |  contain_text_entry_changed(self, widget)
     |      Redisplay the pools based on the new search string.
     |  
     |  filters_changed(self, widget)
     |      Callback used by several widgets related to filtering, anytime 
     |      something changes, we re-display based on the latest choices.
     |  
     |  _contract_selected(self, pool, quantity=1)
     |  
     |  _contract_selection_cancelled(self)
     |  
     |  subscribe_button_clicked(self, button)
     |  
     |  _selection_callback(self, treeselection)
     |  
     |  on_selection(self, selection)
     |      Shows details for the current selected pool.
     |  
     |  on_no_selection(self)

VARIABLES
    
    _ = gettext.gettext
    
    log = logging.getLogger('rhsm-app.'+ __name__)
